name: Market Data Collection

on:
  schedule:
    # Run every 4 hours
    - cron: '0 */4 * * *'
  workflow_dispatch: # Allow manual triggering
    inputs:
      include_history:
        description: 'Include historical data processing'
        required: false
        default: 'false'
        type: boolean

jobs:
  collect-market-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"
        
    # - name: Handle local dependencies for CI
    #   run: |
    #     # Remove local path dependency for CI environment
    #     sed -i '/mydbtools = { path = "..\/..\/tools\/dbtools" }/d' pyproject.toml
    #     # Install mydbtools as regular package or create mock
    #     echo "class TableInfo: pass" > mydbtools.py
    #     echo "class DatabaseInfo: pass" >> mydbtools.py
        
    - name: Install dependencies
      run: uv sync
      
    - name: Create required directories
      run: |
        mkdir -p logs
        mkdir -p data
        mkdir -p databackup
        
    - name: Set up environment variables
      run: |
        echo "CLIENT_ID=${{ secrets.EVE_CLIENT_ID }}" >> $GITHUB_ENV
        echo "SECRET_KEY=${{ secrets.EVE_SECRET_KEY }}" >> $GITHUB_ENV
        echo "TURSO_URL=${{ secrets.TURSO_URL }}" >> $GITHUB_ENV
        echo "TURSO_AUTH_TOKEN=${{ secrets.TURSO_AUTH_TOKEN }}" >> $GITHUB_ENV
        echo "SDE_URL=${{ secrets.SDE_URL }}" >> $GITHUB_ENV
        echo "SDE_AUTH_TOKEN=${{ secrets.SDE_AUTH_TOKEN }}" >> $GITHUB_ENV
        

        
    - name: Set up Google Service Account
      run: |
        echo '${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}' > wcdoctrines-1f629d861c2f.json

    - name: Set up EVE SSO refresh token
      run: |
        echo "REFRESH_TOKEN=${{ secrets.EVE_REFRESH_TOKEN }}" >> $GITHUB_ENV
        
    - name: Download watchlist data
      run: |
        # Create watchlist if it doesn't exist in the repo
        if [ ! -f "databackup/all_watchlist.csv" ]; then
          echo "type_id,type_name,group_id,group_name,category_id,category_name" > databackup/all_watchlist.csv
        fi


    - name: Initialize local databases
      run: |
        # Create empty database files if they don't exist
        touch wcmkt2.db
        touch sde_info.db
        
    - name: Run market data collection
      run: |
        if [ "${{ github.event.inputs.include_history }}" = "true" ]; then
          uv run python main.py --history
        else
          uv run python main.py
        fi
      timeout-minutes: 30
      
    - name: Upload logs as artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: market-data-logs-${{ github.run_number }}
        path: logs/
        retention-days: 7
        
    - name: Upload generated data as artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: market-data-output-${{ github.run_number }}
        path: |
          market_orders.json
          market_history.json
          nakah_stats.csv
          market_orders.csv
        retention-days: 7
        
    - name: Clean up sensitive files
      if: always()
      run: |
        rm -f wcdoctrines-1f629d861c2f.json
        rm -f token.json
        rm -f .env